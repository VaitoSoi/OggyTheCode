const { Client, Message, MessageEmbed, MessageActionRow, MessageButton } = require('discord.js')

module.exports = { 
    name: 'config',
    description: 'D√πng ƒë·ªÉ ch·ªânh c√°c c√†i ƒë·∫∑t v·ªÅ Guild tr√™n CSDL',
    usage: '<Action[Show/Set/Create]> <ID[Livechat-Message/Disable-Enable/Channels/Roles]>',
    /**
    * 
    * @param {Client} client 
    * @param {Message} message 
    * @param {String[]} args 
    */ 
    run: async(client, message, args) => {
        let action = message.content.split(' ')[1].toLowerCase()
            , id = message.content.split(' ')[2]
            , db = require('../models/option')
            , data = await db.findOne({ guildid: message.guildId })
        if (action === 'show') {
            if (!data) return message.reply('üõë | Kh√¥ng th·∫•y `DATA`\nüÜï | Vui l√≤ng d√πng l·ªánh `config create`')
            if (!id) {
                let embed = new MessageEmbed()
                    .setTitle('C√°c c√†i ƒë·∫∑t t·∫°i ' + message.guild.name)
                    .setColor('RANDOM')
                    .setAuthor({
                        name: `${client.user.tag}`,
                        iconURL: client.user.displayAvatarURL()
                    })
                    .setFooter({
                        text: `Y√™u c·∫ßu: ${message.author.tag}`,
                        iconURL: message.author.displayAvatarURL()
                    })
                    .setTimestamp()
                let num = 0
                Object.keys(data.config).forEach(key => {
                    num++
                    let value = ''
                    if (typeof data.config[key] === 'string') value = data.config[key]
                    else if (typeof data.config[key] === 'object')
                        Object.keys(data.config[key]).forEach(k => {
                            value = value + '\n' + k + ': ' + data.config[key][k]
                        });
                    else if (typeof data.config[key] === 'array') value = data.config[key].join('\n')
                    if (value.split(' ').length == 0) value = 'Nothing :ƒê'
                    if (num == 3) {
                        embed.addFields({
                            name: '\u200b',
                            value: '\u200b',
                            inline: true
                        },
                            {
                                name: `${key.toUpperCase()}`,
                                value: '```' + value + ' ```',
                                inline: true
                            })
                    } else {
                        embed.addFields({
                            name: `${key.toUpperCase()}`,
                            value: '```' + value + ' ```',
                            inline: true
                        })
                    }
                })
            } else if (id === 'channels') {
                let embed = new MessageEmbed()
                    .setTitle('C√°c c√†i ƒë·∫∑t v·ªÅ CHANNELS')
                    .setColor('RANDOM')
                    .setAuthor({
                        name: `${client.user.tag}`,
                        iconURL: client.user.displayAvatarURL()
                    })
                    .setFooter({
                        text: `Y√™u c·∫ßu: ${message.author.tag}`,
                        iconURL: message.author.displayAvatarURL()
                    })
                    .setTimestamp()
                Object.keys(data.config.channels).forEach((k) => {
                    let id = ''
                        , channel = ''
                        , config = require('../info/channeldes.json')
                        , des = config[k]
                    if (!message.guild.channels.cache.get(data.config.channels[k])) {
                        id = 'No data'
                        channel = 'No data'
                    } else {
                        id = message.guild.channels.cache.get(data.config.channels[k]).id
                        channel = `<#${id}>`
                    }
                    embed.addFields({
                        name: `${k.split('')[0].toUpperCase()}${k.split('').slice(1).join('').toLowerCase()}`,
                        value: `> Channel: ${channel}\n> ID: ${id}\n> M√¥ t·∫£: ${des}`,
                        inline: true
                    })
                })
                message.reply({ embeds: [embed] })
            } else if (id === 'roles') {
                let embed = new MessageEmbed()
                    .setTitle('C√°c c√†i ƒë·∫∑t v·ªÅ ROLES')
                    .setColor('RANDOM')
                    .setAuthor({
                        name: `${client.user.tag}`,
                        iconURL: client.user.displayAvatarURL()
                    })
                    .setFooter({
                        text: `Y√™u c·∫ßu: ${message.author.tag}`,
                        iconURL: message.author.displayAvatarURL()
                    })
                    .setTimestamp()
                Object.keys(data.config.roles).forEach((k) => {
                    let id = ''
                        , role = ''
                        , config = require('../info/roledes.json')
                        , des = config[k]
                    if (!message.guild.roles.cache.get(data.config.roles[k])) {
                        id = 'No data'
                        role = 'No data'
                    } else {
                        id = message.guild.roles.cache.get(data.config.roles[k]).id
                        role = `<#${id}>`
                    }
                    embed.addFields({
                        name: `${k.split('')[0].toUpperCase()}${k.split('').slice(1).join('').toLowerCase()}`,
                        value: `> Role: ${role}\n> ID: ${id}\n> M√¥ t·∫£: ${des}`,
                        inline: true
                    })
                })
                message.reply({ embeds: [embed] })
            } else if (id === 'disable-enable') {
                let embed = new MessageEmbed()
                    .setTitle('C√°c l·ªánh ch∆∞a b·ªã t·∫Øt v√† ƒë√£ b·ªã t·∫Øt')
                    .setColor('RANDOM')
                    .setAuthor({
                        name: `${client.user.tag}`,
                        iconURL: client.user.displayAvatarURL()
                    })
                    .setFooter({
                        text: `Y√™u c·∫ßu: ${message.author.tag}`,
                        iconURL: message.author.displayAvatarURL()
                    })
                    .setTimestamp()
                const { readdirSync } = require('fs')

                const getDirectories = () =>
                    readdirSync('./commands/', { withFileTypes: true })
                        .filter(dirent => dirent.isDirectory())
                        .map(dirent => dirent.name)
                let disable = []
                    , enable = []
                    , category = getDirectories()
                category.forEach(async (cate) => {
                    let cmds = readdirSync(`./commands/${cate}/`).filter((file) => file.endsWith('.js'))
                    cmds.forEach((cmd) => {
                        if (data.config['disable-enable'].includes(cmd)) disable.push(cmd)
                        else enable.push(cmd)
                    })
                })
                let enabletext = ''
                    , disabletext = ''
                if (disable.length == 0) { enabletext = 'To√†n b·ªô l·ªánh ƒëang b·∫≠t'; disabletext = 'Nothing :ƒê' }
                else if (enable.length > 18) enabletext = enable.slice(0, 18).join('\n') + `'\nV√† h∆°n ${enable.length - 18} l·ªánh...`
                if (disable.length > 18) disabletext = disable.slice(0, 18).join('\n') + `'\nV√† h∆°n ${disable.length - 18} l·ªánh...`
                embed.addFields({
                    name: 'ENABLE',
                    value: 'L√† c√°c l·ªánh ƒëang b·∫≠t.\n```' + enabletext + ' ```',
                    inline: true
                },
                    {
                        name: 'DISABLE',
                        value: 'L√† c√°c l·ªánh ƒë√£ t·∫Øt.\n```' + disabletext + ' ```',
                        inline: true
                    })
                message.reply({ embeds: [embed] })
            } else if (id === 'livechat-message') {
                message.reply(`‚ñ∂ | C√†i ƒë·∫∑t c·ªßa \`${('livechat-message').toUpperCase()}\` l√† ${data.config['livechat-message'].toUpperCase()}`)
            }
        } else if (action === 'create') {
            if (message.options.getString('id')) message.channel.send('`ID` ch·ªâ ph√π h·ª£p khi `ACTION` l√† `Set`')
            if (data) return message.reply('üü° | Data ƒë√£ c√≥ s·∫µn')
            message.reply('‚è≥ | ƒêang t·∫°o `DATA_CONFIG`')
            require('../../util/delay')(1000)
            data1 = new db({
                guildid: message.guildId,
                guildname: message.guild.name,
                config: {
                    'livechat-message': 'client-embed',
                    'disable-enable': [],
                    channels: {
                        mute: 'No data',
                        ban: 'No data',
                        kick: 'No data',
                        warn: 'No data',
                        welcome: 'No data',
                        goodbye: 'No data',
                        livechat: 'No data',
                    },
                    roles: {
                        restart: 'No data',
                        mute: 'No data',
                    }
                }
            })
            await data1.save()
            message.reply('‚úÖ | ƒê√£ t·∫°o `DATA_CONFIG`')
        } else if (action === 'set') {
            if (id === 'channels') {
                if (!message.member.permissions.has('MANAGE_CHANNELS')) return
                let channel
                let type = ''
                const row = new MessageActionRow()
                    .addComponents(
                        new MessageButton()
                            .setCustomId('warn')
                            .setLabel('Warn')
                            .setDisabled(false)
                            .setStyle('PRIMARY')
                    )
                    .addComponents(
                        new MessageButton()
                            .setCustomId('mute')
                            .setLabel('Mute')
                            .setDisabled(false)
                            .setStyle('PRIMARY')
                    )
                    .addComponents(
                        new MessageButton()
                            .setCustomId('kick')
                            .setLabel('Kick')
                            .setDisabled(false)
                            .setStyle('PRIMARY')
                    )
                    .addComponents(
                        new MessageButton()
                            .setCustomId('ban')
                            .setLabel('Ban')
                            .setDisabled(false)
                            .setStyle('PRIMARY')
                    )
                const row1 = new MessageActionRow()
                    .addComponents(
                        new MessageButton()
                            .setCustomId('welcome')
                            .setLabel('Welcome')
                            .setDisabled(false)
                            .setStyle('PRIMARY')
                    )
                    .addComponents(
                        new MessageButton()
                            .setCustomId('goodbye')
                            .setLabel('Goodbye')
                            .setDisabled(false)
                            .setStyle('PRIMARY')
                    )
                    .addComponents(
                        new MessageButton()
                            .setCustomId('livechat')
                            .setLabel('Livechat')
                            .setDisabled(false)
                            .setStyle('PRIMARY')
                    )
                message.reply({
                    content: 'üîΩ | Vui l√≤ng ghi 1 trong nh·ªØng lo·∫°i channel ph√≠a d∆∞·ªõi:\n>>> Mute / Ban / Kick / Warn \nWelcome / Goodbye / Livechat',
                    components: [row, row1]
                })
                const componentCollector = message.channel.createMessageComponentCollector({
                    componentType: 'BUTTON'
                })
                const messageCollector = message.channel.createMessageCollector()
                componentCollector.on('collect', (inter) => {
                    if (inter.user.id !== message.author.id) return
                    type = inter.customId
                    inter.message.edit({
                        content: 'üîΩ | Vui l√≤ng ghi ID ho·∫∑c tag channel mu·ªën c√†i!',
                        components: []
                    })
                })
                messageCollector.on('collect', async (msg) => {
                    if (msg.author.id !== message.author.id) return
                    if (msg.content.startsWith('<#') && msg.content.endsWith('>')) channel = msg.mentions.channels.first()
                    else channel = message.guild.channels.cache.get(msg.content)
                    if (msg.deletable) msg.delete()
                    if (!channel) return msg.channel.send('üõë | Kh√¥ng t√¨m th·∫•y channel!')
                    if (!channel.isText()) return msg.channel.send(`üõë | <#${channel.id}> kh√¥ng ph·∫£i channel vƒÉn b·∫£n.\n‚ñ∂ | Vui l√≤ng tag ho·∫∑c ghi ID c·ªßa 1 channel vƒÉn b·∫£n!`)
                    else {
                        data.config.channels[type] = channel.id
                        try {
                            await data.save()
                            msg.channel.send('‚úÖ | ƒê√£ l∆∞u `DATA`')
                            channel.send(`‚úÖ | Channel ƒë√£ ch·ªânh th√†nh \`${type.toUpperCase()}\``)
                        } catch (e) {
                            msg.channel.send('üõë | Ph√°t hi·ªán l·ªói khi l∆∞u `DATA`')
                            msg.channel.send('```' + e + '```')
                        }
                    }
                    if (channel.fetchWebhooks().find(wh => wh.token)) return
                    if (data.config['livechat-message'].split('').slice(0, 7).join('').toLowerCase() === 'webhook') {
                        try {
                            channel.createWebhook('Oggy - Livechat', {
                                avatar: client.user.displayAvatarURL(),
                                reason: 'Livechat'
                            })
                            inter.channel.send('‚úÖ | ƒê√£ t·∫°o Webhook t·∫°i <#' + channel.id + '>')
                        } catch (e) {
                            inter.channel.send('üõë | G·∫∑p l·ªói trong qu√° tr√¨nh t·∫°o Webhook.\n‚ñ∂ | L·ªói: `' + e + '`')
                        }
                    }
                })
            } else if (action === 'roles') {
                if (!message.member.permissions.has('MANAGE_ROLES')) return
                let role
                let type = ''
                const row = new MessageActionRow()
                    .addComponents(
                        new MessageButton()
                            .setCustomId('restart')
                            .setLabel('Restart')
                            .setDisabled(true)
                            .setStyle('DANGER')
                    )
                    .addComponents(
                        new MessageButton()
                            .setCustomId('mute')
                            .setLabel('Mute')
                            .setDisabled(false)
                            .setStyle('PRIMARY')
                    )
                message.reply({
                    content: 'üîΩ | Vui l√≤ng ghi 1 trong nh·ªØng lo·∫°i role ph√≠a d∆∞·ªõi:\n>>> Mute / Restart (ch∆∞a th·ªÉ s·ª≠ d·ª•ng)',
                    components: [row]
                })
                const componentCollector = message.channel.createMessageComponentCollector({
                    componentType: 'BUTTON'
                })
                const messageCollector = message.channel.createMessageCollector()
                componentCollector.on('collect', (inter) => {
                    if (inter.user.id !== message.author.id) return
                    type = inter.customId
                    inter.message.edit({
                        content: 'üîΩ | Vui l√≤ng ghi ID ho·∫∑c tag role mu·ªën c√†i!',
                        components: []
                    })
                })
                messageCollector.on('collect', (msg) => {
                    if (msg.author.id !== message.author.id) return
                    if (msg.content.startsWith('<@&') && msg.content.endsWith('>')) role = msg.mentions.roles.first()
                    else role = message.guild.roles.cache.get(msg.content)
                    if (msg.deletable) msg.delete()
                    if (!role) return msg.channel.send('üõë | Kh√¥ng t√¨m th·∫•y role!')
                    else {
                        data.config.roles[type] = role.id
                        try {
                            data.save()
                            msg.channel.send('‚úÖ | ƒê√£ l∆∞u `DATA`')
                        } catch (e) {
                            msg.channel.send('üõë | Ph√°t hi·ªán l·ªói khi l∆∞u `DATA`')
                            msg.channel.send('```' + e + '```')
                        }
                    }
                })
            } else if (id === 'disable-enable') {
                if (!message.member.permissions.has('MANAGE_GUILD')) return
                let type = ''
                    , cmd = []
                    , getDirectories = () =>
                        readdirSync('./commands/', { withFileTypes: true })
                            .filter(dirent => dirent.isDirectory())
                            .map(dirent => dirent.name)
                    , category = getDirectories()
                    , cmds = []
                    , done = []
                    , error = []
                category.forEach(async (cate) => {
                    readdirSync(`./commands/${cate}/`).filter((file) => file.endsWith('.js')).forEach(file => {
                        cmds.push(file.toLowerCase())
                    })
                })
                const row = new MessageActionRow()
                    .addComponents(
                        new MessageButton()
                            .setCustomId('off')
                            .setLabel('T·∫Øt')
                            .setDisabled(false)
                            .setStyle('PRIMARY')
                    )
                    .addComponents(
                        new MessageButton()
                            .setCustomId('on')
                            .setLabel('B·∫≠t')
                            .setDisabled(false)
                            .setStyle('PRIMARY')
                    )
                message.reply({
                    content: 'üîΩ | Vui l√≤ng ch·ªçn ch·∫ø ƒë·ªô b·∫≠t hay t·∫Øt.',
                    components: [row]
                })
                let componentCollector = message.channel.createMessageComponentCollector({
                    componentType: 'BUTTON'
                })
                let messageCollector = message.channel.createMessageCollector()
                componentCollector.on('collect', (inter) => {
                    let type = inter.customId.toLowerCase()
                    message.reply('‚úÖ | ƒê√£ ch·ªçn ch·∫ø ƒë·ªô `' + type.toUpperCase() + '`')
                    require('../../util/delay')(1000)
                    message.reply('üîΩ | Vui l√≤ng ghi t√™n c√°c l·ªánh mu·ªën t·∫Øt/b·∫≠t.\n‚úÖ | Vi·∫øt `DONE!` ƒë·ªÉ k·∫øt th√∫c!')
                })
                messageCollector.on('collect', (msg) => {
                    if (msg.author.id !== message.author.id) return
                    if (msg.content.toLowerCase() !== 'done!') {
                        cmd.push(msg.content.toLowerCase())
                    } else {
                        cmd.forEach((cmd) => {
                            if (!cmds.includes(cmd)) return error.push('Kh√¥ng t√¨m th·∫•y l·ªánh ' + cmd + '!')
                            else {
                                if (type === 'on') {
                                    let num
                                    data.config['disable-enable'].forEach((d) => {
                                        if (d === cmd) {
                                            data.config['disable-enable'].splice(num, 0)
                                            done.push('ƒê√£ b·∫≠t l·ªánh ' + cmd + '!')
                                        } else if (num === data.config['disable-enable'].length) error.push('L·ªánh ' + cmd + ' kh√¥ng b·ªã t·∫Øt!')
                                        num++
                                    })
                                } else if (type === 'off') {
                                    if (data.config['disable-enable'].includes(cmd)) return error.push('L·ªánh ƒë√£ b·ªã t·∫Øt tr∆∞·ªõc ƒë√≥!')
                                    data.config['disable-enable'].push(cmd)
                                    done.push('ƒê√£ t·∫Øt l·ªánh ' + cmd + '!')
                                }
                            }
                        })
                        msg.reply('‚úÖ | Th√†nh c√¥ng: ```' + done.join('\n') + '```\n‚ùå | Th·∫•t b·∫°i: ```' + error.join('\n') + '```')
                    }
                })
            } else if (id === 'livechat-message') {
                if (!message.member.permissions.has('MANAGE_MESSAGES')) return
                const row1 = new MessageActionRow()
                    .addComponents(
                        new MessageButton()
                            .setCustomId('client-embed')
                            .setLabel('Client - Embed')
                            .setDisabled(false)
                            .setStyle('PRIMARY')
                            .setEmoji('962690273048162344')
                    )
                    .addComponents(
                        new MessageButton()
                            .setCustomId('client-codeblock')
                            .setLabel('Client - CodeBlock')
                            .setDisabled(false)
                            .setStyle('PRIMARY')
                            .setEmoji('962690273048162344')
                    )
                const row2 = new MessageActionRow()
                    .addComponents(
                        new MessageButton()
                            .setCustomId('webhook-embed')
                            .setLabel('Webhook - Embed')
                            .setDisabled(false)
                            .setStyle('SECONDARY')
                            .setEmoji('962690273228505178')
                    )
                    .addComponents(
                        new MessageButton()
                            .setCustomId('webhook-codeblock')
                            .setLabel('Webhook - CodeBlock')
                            .setDisabled(false)
                            .setStyle('SECONDARY')
                            .setEmoji('962690273228505178')
                    )
                const row3 = new MessageActionRow()
                    .addComponents(
                        new MessageButton()
                            .setCustomId('what')
                            .setLabel('Nh·ªØng c√°i ƒë√≥ l√† g√¨ :)?')
                            .setDisabled(false)
                            .setStyle('PRIMARY')
                            .setEmoji('947300772054446101')
                    )
                message.reply({
                    content: 'üîΩ | Vui l√≤ng ch·ªçn 1 trong nh·ªØng l·ª±a ch·ªçn ph√≠a d∆∞·ªõi!',
                    components: [
                        row1,
                        row2,
                        row3
                    ]
                })
                let componentCollector = message.channel.createMessageComponentCollector({
                    componentType: 'BUTTON'
                })
                componentCollector.on('collect', async (inter) => {
                    if (inter.user.id !== message.author.id) return
                    if (inter.customId === 'what') {
                        inter.deferReply()

                        await require('../../util/delay')(2500)
                        await inter.editReply({
                            content: '> C√°c c√°ch th·ª©c g·ª≠i tin nh·∫Øn:\nLo·∫°i 1: `Client`\nL√† tin nh·∫Øn t·ª´ ch√≠nh User n√†y!\n∆Øu ƒëi·ªÉm:\n> Tr√°nh vi·ªác b·ªã ban do spam webhook.\n> H·∫°n ch·∫ø ping cao, tr√†n ram\nNh∆∞·ª£c ƒëi·ªÉm:\n> Kh√¥ng th·∫©m m·ªπ.\n> Kh√¥ng th·∫•y ƒë∆∞·ª£c avatar ng∆∞·ªùi g·ª≠i.',
                        })
                        try {
                            await inter.channel.createWebhook('Livechat - Webhook', {
                                avatar: client.user.displayAvatarURL(),
                                reason: 'M·∫´u Webhook c·ªßa Livechat'
                            }).then((webhook) => {
                                webhook.send({
                                    content: 'Lo·∫°i 2: `Webhook`\nL√† tin nh·∫Øn t·ª´ `Webhook` nh∆∞ th·∫ø n√†y!\n∆Øu ƒëi·ªÉm:\n> Th·∫•y ƒë∆∞·ª£c avatar c·ªßa ng∆∞·ªùi g·ª≠i.\n> Th·∫©m m·ªπ h∆°n Client ||(m·ªôt ch√∫t :ƒê)||\nNh∆∞·ª£c ƒëi·ªÉm:\n> G√¢y ra t√¨nh tr·∫°ng ping cao, tr√†n ram.\n> D·ªÖ b·ªã tia b·ªüi c√°c AntiNuke bot (nh∆∞: YourAuth, MEE6, Wick, Dyno, Carl,...) do spam Webhook'
                                }).then(() => webhook.delete('Ho√†n th√†nh vi·ªác g·ª≠i M·∫´u'))
                            })
                        } catch (e) {
                            inter.channel.send('https://cdn.discordapp.com/attachments/936994104884224020/962720653448982528/unknown.png')
                        }
                        await require('../../util/delay')(3000)
                        inter.channel.send({
                            content: '> C√°c lo·∫°i tin nh·∫Øn:\nCodeBlock:\n```md\n# <OggyTheBot> ƒê√¢y l√† m·ªôt tin nh·∫Øn d·∫°ng CodeBlock\n```\n∆Øu ƒëi·ªÉm:\n> Y√™u c·∫ßu √≠t quy·ªÅn (SEND_MESSAGES)\nNh∆∞·ª£c ƒëi·ªÉm:\n> Kh√¥ng th·∫©m m·ªπ nh∆∞ Embed\n> C√≥ th·ªÉ b·ªã Muted/Timeout do n·ªôi dung ch·ª©a t·ª´ ng·ªØ l·∫∑p l·∫°i',
                            embeds: [
                                new MessageEmbed()
                                    .setColor('BLUE')
                                    .setTitle('<OggyTheBot> ƒê√¢y l√† m·ªôt tin nh·∫Øn d·∫°ng Embed')
                                    .setDescription('∆Øu ƒëi·ªÉm.\n> Th·∫©m m·ªπ h∆°n.\nKh√¥ng b·ªã Mute/Timeout do c√≥ n·ªôi dung ch·ª©a t·ª´ ng·ªØ l·∫∑p l·∫°i.\nNh∆∞·ª£c ƒëi·ªÉm:\n> Y√™u c·∫ßu nhi·ªÅu quy·ªÅn.')
                            ]
                        })
                        await require('../../util/delay')(3000)
                        inter.channel.send('üõë | L∆∞u √Ω: C·∫£ hai c√°ch g·ª≠i tr√™n ƒë·ªÅu c√≥ 1 nh∆∞·ª£c ƒëi·ªÉm r·∫•t l·ªõn:\n**D·ªÑ B·ªä MUTE/TIMEOUT V√å SPAM TIN NH·∫ÆN**\nN√™n c·∫©n th·∫≠n khi trong server c√≥ c√°c bot nh∆∞ **Wick**, MEE6, Dyno, Carl, Your Auth hay c√°c bot AntiNuke ho·∫∑c c√≥ module AntiNuke.\nT·ªët nh·∫•t th√¨ h√£y Whitelist cho <@!' + client.user.id + '> ƒë·ªÉ tr√°nh vi·ªác b·ªã Mute hay Timeout.')
                    } else {
                        let custom = inter.customId.toLowerCase()
                        if (custom !== 'client-embed'
                            && custom !== 'client-codeblock'
                            && custom !== 'webhook-embed'
                            && custom !== 'webhook-codeblock') return
                        data.config['livechat-message'] = custom
                        await data.save()
                        inter.reply('‚úÖ | ƒê√£ ch·ªânh th√†nh `' + custom.toUpperCase() + '`')
                        if (!data.config.livechat) return inter.channel.send('üõë | Kh√¥ng th·ªÉ Setup Webhook t·∫°i Livechat Channel!\n‚ñ∂ | L√Ω do: `Kh√¥ng t√¨m th·∫•y data v·ªÅ Livechat Channel`')
                        try {
                            const channel = inter.guild.channels.cache.get(data.config.livechat)
                            channel.createWebhook('Oggy - Livechat', {
                                avatar: client.user.displayAvatarURL(),
                                reason: 'Livechat'
                            })
                            inter.channel.send('‚úÖ | ƒê√£ t·∫°o Webhook t·∫°i <#' + channel.id + '>')
                        } catch (e) {
                            inter.channel.send('üõë | G·∫∑p l·ªói trong qu√° tr√¨nh t·∫°o Webhook.\n‚ñ∂ | L·ªói: `' + e + '`')
                        }
                    }
                })
            }
        }
    }
}
